<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int N=3;
const int R=1;
typedef int[0,N-1] id_t;
typedef int[0,R-1] id_r;
chan ready[N], stop, releaseCPU[N], request[R], block[R];
urgent broadcast chan unlock[R], lock[R];
broadcast chan free[R];
urgent chan run[N];

typedef struct { 
    int req[N];
    int rel[N];
    bool isUsing[N]; 
    bool hasLocked[N];
    bool hasReleased[N];
} res;

res resList[R] = {
       //            req t    release t  using?  locked?   released?
       /* SensorBuffer */  {{1,2,1}, {7,9,29}, {1,1,1}, {0,0,0}, {0,0,0} }
};




clock time;</declaration>
	<template>
		<name x="5" y="5">TASK</name>
		<parameter>const id_t id, const int T, const int C</parameter>
		<declaration>// Place local declarations here.
clock t, c;

id_r ridRequested;
id_r ridToRelease;

bool shouldRequest(id_r rid){
    res r = resList[rid];
    return r.isUsing[id] &amp;&amp; !r.hasLocked[id] &amp;&amp; !r.hasReleased[id];
}
bool shouldRelease(id_r rid){
    res r = resList[rid];
    return r.isUsing[id] &amp;&amp; r.hasLocked[id] &amp;&amp; !r.hasReleased[id];
}


int nextRequest = 1000;
int nextRelease = 1000;


void setNextRequest(){
    int i;
    int current;
    nextRequest = 1000;
    for(i = 0; i &lt; R; i++){
        res r = resList[i];
        if(r.isUsing[id] &amp;&amp; !r.hasLocked[id] &amp;&amp; !r.hasReleased[id]){
            current = r.req[id];
            if(current &lt; nextRequest) nextRequest = current;
        }
    }
}
void setNextRelease(){
    int i;
    int current;
    nextRelease = 1000;
    for(i = 0; i &lt; R; i++){
        res r = resList[i];
        if(r.isUsing[id] &amp;&amp; !r.hasReleased[id] &amp;&amp; r.hasLocked[id]){
            current = r.rel[id];
            if(current &lt; nextRelease) nextRelease = current;       
        }
    }
}
void resetRes(){
    int i = 0;
    for(i = 0; i &lt; R; i++){
        if(resList[i].isUsing[id]) {
            resList[i].hasReleased[id] = false;
            resList[i].hasLocked[id] = false;
        }
    }
}

bool hasResource(){
    int i = 0;
    for(i = 0; i &lt; R; i++){
        if(resList[i].isUsing[id] &amp;&amp; !resList[i].hasReleased[id]) {
            return true;
        }
    }
    return false;
}</declaration>
		<location id="id0" x="-578" y="25">
			<urgent/>
		</location>
		<location id="id1" x="-382" y="-76">
			<urgent/>
		</location>
		<location id="id2" x="-433" y="399">
			<urgent/>
		</location>
		<location id="id3" x="-578" y="186">
			<name x="-646" y="212">Requesting</name>
		</location>
		<location id="id4" x="-578" y="-76" color="#ffa500">
			<name x="-603" y="-127">Blocked</name>
			<label kind="invariant" x="-629" y="-110">t &lt;= T &amp;&amp; c' == 0</label>
		</location>
		<location id="id5" x="170" y="229" color="#ff0000">
			<name x="187" y="220">Error</name>
		</location>
		<location id="id6" x="-68" y="229" color="#00ff00">
			<name x="-76" y="255">Running</name>
			<label kind="invariant" x="-76" y="272">c &lt;= C &amp;&amp;
t &lt;= T &amp;&amp;
c &lt;= nextRequest &amp;&amp;
c &lt;= nextRelease</label>
		</location>
		<location id="id7" x="-68" y="-76" color="#ff00ff">
			<name x="-51" y="-119">Ready</name>
			<label kind="invariant" x="-51" y="-102">t&lt;=T &amp;&amp; c'==0</label>
		</location>
		<location id="id8" x="-68" y="-238" color="#ffff00">
			<name x="-85" y="-289">Idle</name>
			<label kind="invariant" x="-85" y="-272">t&lt;=T</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-705" y="119">t &gt;= T</label>
			<nail x="-714" y="-76"/>
			<nail x="-714" y="442"/>
			<nail x="170" y="442"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-578" y="-34">releaseCPU[id]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-578" y="93">block[ridRequested]?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-221" y="-93">ready[id]!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-552" y="-93">free[ridRequested]?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-212" y="416">unlock[ridRequested]!</label>
			<label kind="assignment" x="-212" y="399">setNextRelease()</label>
			<nail x="-170" y="390"/>
			<nail x="-170" y="390"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="select" x="-603" y="340">r : id_r</label>
			<label kind="guard" x="-603" y="323">shouldRelease(r) &amp;&amp; c == resList[r].rel[id]</label>
			<label kind="assignment" x="-603" y="357">resList[r].hasReleased[id] = true,
ridRequested = r</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-110" y="76">stop?</label>
			<nail x="-119" y="93"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-8" y="76">run[id]?</label>
			<label kind="assignment" x="-17" y="59">setNextRequest()</label>
			<nail x="-17" y="93"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-544" y="246">lock[ridRequested]?</label>
			<label kind="assignment" x="-544" y="195">resList[ridRequested].hasLocked[id] = true,
setNextRelease(),
setNextRequest()</label>
			<nail x="-289" y="178"/>
			<nail x="-195" y="204"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="select" x="-416" y="85">r : id_r</label>
			<label kind="guard" x="-416" y="51">shouldRequest(r) &amp;&amp; c == resList[r].req[id]</label>
			<label kind="synchronisation" x="-416" y="68">request[r]!</label>
			<label kind="assignment" x="-416" y="102">ridRequested = r</label>
			<nail x="-348" y="119"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="42" y="212">t &gt;= T</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-926" y="17">c==C &amp;&amp; !hasResource()</label>
			<label kind="synchronisation" x="-926" y="-17">releaseCPU[id]!</label>
			<label kind="assignment" x="-926" y="0">resetRes()</label>
			<nail x="-263" y="288"/>
			<nail x="-739" y="289"/>
			<nail x="-739" y="-238"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="guard" x="178" y="-51">t &gt;= T</label>
			<nail x="170" y="-76"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-59" y="-221">t==T</label>
			<label kind="synchronisation" x="-59" y="-204">ready[id]!</label>
			<label kind="assignment" x="-59" y="-187">t=0,
c=0</label>
		</transition>
	</template>
	<template>
		<name>RESOURCE</name>
		<parameter>const id_r id</parameter>
		<location id="id9" x="110" y="-93">
			<name x="85" y="-127">Released</name>
			<urgent/>
		</location>
		<location id="id10" x="110" y="119">
			<name x="51" y="85">RequestReceived</name>
			<urgent/>
		</location>
		<location id="id11" x="110" y="8">
			<urgent/>
		</location>
		<location id="id12" x="212" y="8">
			<name x="221" y="-25">Locked</name>
		</location>
		<location id="id13" x="0" y="8">
			<name x="-42" y="-25">Free</name>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id12"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="221" y="-93">unlock[id]?</label>
			<nail x="212" y="-93"/>
			<nail x="212" y="-93"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-68" y="-93">free[id]!</label>
			<nail x="0" y="-93"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="221" y="93">lock[id]!</label>
			<nail x="212" y="119"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-93" y="93">request[id]?</label>
			<nail x="0" y="119"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="136" y="-51">block[id]!</label>
			<nail x="161" y="-34"/>
			<nail x="161" y="-34"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="119" y="17">request[id]?</label>
		</transition>
	</template>
	<template>
		<name>SCHEDULER</name>
		<declaration>id_t list[N] = { 2, 1, 0 }; //Index value 3 is out of range. Array length = 3, Element size = 1
typedef int[1,3] p_t;
p_t P[N] = { 1, 2, 3 };
int[0,N] len = N; 

p_t DP[N] = {1, 2, 3};



// put an element in queue
void enqueue(id_t task) {


    list[len++] = task;

    if (len &gt; 0){

        int i = len - 1;

        while (i &gt; 0 &amp;&amp; DP[list[i]] &gt; DP[list[i-1]]) {
            int tmp = list[i-1];
            list[i-1] = list[i];
            list[i] = tmp;
            i--;
        }
    }
}




// Remove the frontmost element from queue.
void dequeue(){
    int i = 0;
    len--;
    while (i &lt; len) {
        list[i] = list[i+1];
        i++;
    }
    list[i] = 0;
}

// Return the firstmost element.
id_t front(){
    return list[0];
}

void updateQueue(){
    int i = 0;
    while (i &lt; N-1) {
        if(DP[list[i]] &lt; DP[list[i+1]]){
            int tmp = list[i+1];
            list[i+1] = list[i];
            list[i] = tmp;
        }
        i++;
    }
}

void raisePriority(id_r rid){
    id_t runningTask = front();
    res r = resList[rid];
    int i = N-1;
    while(i &gt;= 0){
        if(r.isUsing[i]){
            if(DP[runningTask] &lt; P[i]) DP[runningTask] = P[i];
            return;
        }
        i--;
    }
    updateQueue();
}

void resetPriority(){
    id_t runningTask = front();
    int i = 0;
    DP[runningTask] = P[runningTask];
    for(i = 0; i &lt; R; i++){
        res r = resList[i];
        if(r.hasLocked[runningTask] &amp;&amp; !r.hasReleased[runningTask]){
            raisePriority(i);
        }
    }
    
    updateQueue();
}












</declaration>
		<location id="id14" x="-127" y="144">
		</location>
		<location id="id15" x="-297" y="144">
			<urgent/>
		</location>
		<location id="id16" x="-212" y="-34">
		</location>
		<location id="id17" x="-212" y="-119">
			<urgent/>
		</location>
		<location id="id18" x="-212" y="-272">
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="select" x="0" y="110">r : id_r</label>
			<label kind="synchronisation" x="0" y="127">unlock[r]?</label>
			<label kind="assignment" x="0" y="144">resetPriority()</label>
			<nail x="-8" y="110"/>
			<nail x="-8" y="187"/>
			<nail x="-297" y="187"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="select" x="-399" y="-34">r : id_r</label>
			<label kind="synchronisation" x="-399" y="-17">lock[r]?</label>
			<label kind="assignment" x="-399" y="0">raisePriority(r)</label>
			<nail x="-289" y="42"/>
			<nail x="-306" y="0"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-153" y="76">run[front()]!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-229" y="118">stop!</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="select" x="-357" y="51">e : id_t</label>
			<label kind="synchronisation" x="-357" y="68">ready[e]?</label>
			<label kind="assignment" x="-357" y="85">enqueue(e)</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-204" y="-93">run[front()]!</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="select" x="-76" y="-170">e : id_t</label>
			<label kind="guard" x="-76" y="-153">e == front()</label>
			<label kind="synchronisation" x="-76" y="-136">releaseCPU[e]?</label>
			<label kind="assignment" x="-76" y="-119">dequeue()</label>
			<nail x="-102" y="-34"/>
			<nail x="-102" y="-272"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="-306" y="-204">len &gt; 0</label>
			<label kind="synchronisation" x="-306" y="-187">run[front()]!</label>
			<nail x="-314" y="-272"/>
			<nail x="-314" y="-34"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="select" x="-204" y="-246">e : id_t</label>
			<label kind="synchronisation" x="-204" y="-229">ready[e]?</label>
			<label kind="assignment" x="-204" y="-212">enqueue(e)</label>
		</transition>
	</template>
	<system>//TASK: id, period, and wcet.
SamplePlant = TASK(0, 150, 10);
SamplePath = TASK(1, 60, 10);
ColourSensorBG = TASK(2, 60, 30);

SensorBuffer = RESOURCE(0);

Scheduler = SCHEDULER();

// List one or more processes to be composed into a system.
system SamplePlant, SamplePath, ColourSensorBG, Scheduler, SensorBuffer;

gantt {
    SamplePlant:
        SamplePlant.Ready -&gt; 6,
        SamplePlant.Running -&gt; 1,
        SamplePlant.Blocked -&gt; 4;
    SamplePath:
        SamplePath.Ready -&gt; 6,
        SamplePath.Running -&gt; 1,
        SamplePath.Blocked -&gt; 4;
    ColourSensorBG:
        ColourSensorBG.Ready -&gt; 6,
        ColourSensorBG.Running -&gt; 1,
        ColourSensorBG.Blocked -&gt; 4;
}
</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not (SamplePlant.Error or SamplePath.Error or ColourSensorBG.Error)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
